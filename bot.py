import logging
import re
from datetime import datetime
from telegram import Update, Message, Chat
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8285946823:AAE6mT6BtJsOkTQFsP-IrBHonhtaUaJAg8g"
MAIN_CHAT_ID = -4884863804
LIST_CHAT_ID = -1002900105796

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
LAST_PROCESSED_MESSAGE = None

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

async def ping(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ping"""
    await update.message.reply_text("Pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /ping –æ—Ç {update.effective_user.id}")

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∑–∞–ø—É—â–µ–Ω!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "/test - –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞\n"
        "/debug - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n\n"
        "üìã <b>–§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        "@username1\n"
        "123456789"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {update.effective_user.id}")

async def test_command(update: Update, context: CallbackContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    logger.info("[test_command] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    test_msg = """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:
@test_user
123456789"""
    members = extract_members(test_msg)
    await update.message.reply_text(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{test_msg}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{members}")

async def debug_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_info = (
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{LAST_PROCESSED_MESSAGE or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"LIST_CHAT_ID: {LIST_CHAT_ID}\n"
        f"MAIN_CHAT_ID: {MAIN_CHAT_ID}"
    )
    await update.message.reply_text(f"<pre>{debug_info}</pre>", parse_mode='HTML')

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏ @username –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    global LAST_PROCESSED_MESSAGE
    logger.info(f"[extract_members] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:\n{text[:200]}...")
    LAST_PROCESSED_MESSAGE = text[:200]
    
    members = set()
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    if not lines:
        logger.warning("[extract_members] –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
        return members

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for line in lines[1:]:
        try:
            if line.startswith('@'):
                username = line[1:].lower()
                if re.fullmatch(r'[a-z0-9_]{5,32}', username):
                    members.add(username)
            elif re.fullmatch(r'\d{5,}', line):
                members.add(line)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")

    logger.info(f"[extract_members] –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
    return members

async def check_members(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    global LAST_PROCESSED_MESSAGE
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞
        if update.effective_chat.id != LIST_CHAT_ID:
            logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–æ–π —á–∞—Ç {update.effective_chat.id}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message or not update.message.text:
            logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message.text.startswith('/'):
            return

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {update.effective_chat.id}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        new_members = extract_members(update.message.text)
        if not new_members:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        try:
            chat = await context.bot.get_chat(MAIN_CHAT_ID)
            bot_member = await chat.get_member(context.bot.id)
            if not bot_member.can_restrict_members:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ!")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await chat.get_administrators()
        removed = []

        for member in admins:
            if member.status == 'creator':
                continue
                
            user_id = str(member.user.id)
            username = member.user.username.lower() if member.user.username else None

            if (user_id not in new_members) and (username not in new_members):
                try:
                    await context.bot.ban_chat_member(MAIN_CHAT_ID, member.user.id)
                    removed.append(username or user_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {e}")

        if removed:
            await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã: {', '.join(removed)}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("="*50)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        logger.info(f"LIST_CHAT_ID: {LIST_CHAT_ID}")
        logger.info(f"MAIN_CHAT_ID: {MAIN_CHAT_ID}")

        application = Application.builder().token(TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("ping", ping))
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("debug", debug_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.Chat(chat_id=LIST_CHAT_ID) & (filters.TEXT | filters.CAPTION),
            check_members
        ), group=1)

        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)

if __name__ == "__main__":
    main()
