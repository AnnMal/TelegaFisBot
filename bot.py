import logging
import re
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8285946823:AAE6mT6BtJsOkTQFsP-IrBHonhtaUaJAg8g"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MAIN_CHAT_ID = -4884863804  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç–∫—É–¥–∞ —É–¥–∞–ª—è—Ç—å)
LIST_CHAT_ID = -1002900105796  # ID —á–∞—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º (–≥–¥–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ (–î–í–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –§—É–Ω–∫—Ü–∏—è post_init (—á–∞—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
async def post_init(app: Application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ"""
    try:
        await app.bot.send_message(
            chat_id=LIST_CHAT_ID,
            text="üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        )
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏ @username —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    members = set()
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    for line in lines:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏" in line.lower():
            continue
            
        # –ò—â–µ–º ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        if re.fullmatch(r'\d{5,}', line):
            members.add(line)
        # –ò—â–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã
        elif line.startswith('@'):
            username = line[1:].lower()
            if re.fullmatch(r'[a-z0-9_]{5,32}', username):
                members.add(username)
    
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏: {members}")
    return members

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
async def check_members(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞"""
    try:
        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∞—Ç–∞
        if update.effective_chat.id != LIST_CHAT_ID:
            logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {update.effective_chat.id}")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞
        new_members = extract_members(update.message.text)
        if not new_members:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        bot_member = await context.bot.get_chat_member(MAIN_CHAT_ID, context.bot.id)
        if not bot_member.can_restrict_members:
            await update.message.reply_text("‚ö†Ô∏è –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ!")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        admins = await context.bot.get_chat_administrators(MAIN_CHAT_ID)
        to_remove = []
        
        for member in admins:
            user_identifiers = {
                str(member.user.id),
                member.user.username.lower() if member.user.username else None
            }
            
            # –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–ø–∏—Å–∫–µ
            if not user_identifiers & new_members and member.status != "creator":
                to_remove.append(member)

        # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for member in to_remove:
            try:
                await context.bot.ban_chat_member(
                    chat_id=MAIN_CHAT_ID,
                    user_id=member.user.id,
                    until_date=int(datetime.now().timestamp()) + 60  # –ë–∞–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω: {member.user.username or member.user.id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

        await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(to_remove)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞: –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async def test_command(update: Update, context: CallbackContext):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    test_msg = """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:
@test_user
123456789"""
    
    fake_update = Update(
        update_id=update.update_id + 1,
        message=Message(
            message_id=update.message.message_id + 1,
            date=datetime.now(),
            chat=Chat(id=LIST_CHAT_ID, type='supergroup'),
            text=test_msg
        )
    )
    await check_members(fake_update, context)

def main():
    application = Application.builder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("test", test_command))  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    application.add_handler(MessageHandler(
        filters.Chat(chat_id=LIST_CHAT_ID) & filters.TEXT,
        check_members
    ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
