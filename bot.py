import logging
import re
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8285946823:AAE6mT6BtJsOkTQFsP-IrBHonhtaUaJAg8g"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MAIN_CHAT_ID = -4884863804  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç–∫—É–¥–∞ —É–¥–∞–ª—è—Ç—å)
LIST_CHAT_ID = -1002900105796  # ID —á–∞—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º (–≥–¥–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def debug_handler(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {update.effective_chat.id}: {update.effective_message.text}")

async def post_init(application: Application) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    await application.bot.send_message(
        chat_id=LIST_CHAT_ID,
        text="üîî –ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n"
             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
             "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
             "@username1\n"
             "123456789"
    )
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/logs - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏\n\n"
        f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞: <code>{LIST_CHAT_ID}</code>"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–ª–∏ @username –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    user_ids = set(re.findall(r'(?<!\d)\d{5,}(?!\d)', text))
    usernames = set(re.findall(r'@([a-zA-Z0-9_]{5,32})\b', text))
    return user_ids.union(usernames)

async def check_members(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏—Ö."""
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {update.effective_chat.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
        if update.effective_chat.id != LIST_CHAT_ID:
            logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {update.effective_chat.id} (–æ–∂–∏–¥–∞–ª {LIST_CHAT_ID})")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_text = update.effective_message.text
        logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{raw_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        new_members = extract_members(raw_text)
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {new_members}")
        
        if not new_members:
            error_msg = "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–∂–∏–¥–∞—é —Ñ–æ—Ä–º–∞—Ç:\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n@username1\n123456789"
            await update.message.reply_text(error_msg)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        chat = await context.bot.get_chat(MAIN_CHAT_ID)
        try:
            admins = await chat.get_administrators()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {MAIN_CHAT_ID}")
            return

        current_members = {
            str(member.user.id) for member in admins
        }.union(
            {member.user.username.lower() for member in admins if member.user.username}
        )
        logger.info(f"–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {current_members}")

        # –ü–æ–∏—Å–∫ –∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å
        to_remove = [
            member for member in admins
            if (str(member.user.id) not in new_members) and 
               (member.user.username and member.user.username.lower() not in new_members)
        ]

        if not to_remove:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await update.message.reply_text("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return

        # –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è
        success = []
        failed = []
        
        for member in to_remove:
            try:
                if member.status != 'creator':
                    await context.bot.ban_chat_member(MAIN_CHAT_ID, member.user.id)
                    username = member.user.username or member.user.id
                    success.append(username)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {username}")
            except Exception as e:
                failed.append(str(member.user.id))
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {member.user.id}: {e}")

        # –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        report = []
        if success:
            report.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {', '.join(map(str, success))}")
        if failed:
            report.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {', '.join(failed)}")
        
        if report:
            await update.message.reply_text("\n".join(report))

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_members:")
        await update.message.reply_text(f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")



def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(
        MessageHandler(
            filters.Chat(chat_id=LIST_CHAT_ID) & filters.TEXT,
            check_members
        )
    )

    # –í main() –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ run_polling():
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, debug_handler), group=-1)

    logger.info("üü¢üü¢üü¢ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main()
