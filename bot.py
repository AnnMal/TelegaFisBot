import logging
import re
from telegram import Update, Message, Chat
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8285946823:AAE6mT6BtJsOkTQFsP-IrBHonhtaUaJAg8g"
MAIN_CHAT_ID = -4884863804  # –ß–∞—Ç, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
LIST_CHAT_ID = -1002900105796  # –ß–∞—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LAST_PROCESSED_MESSAGE = None

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏ @username –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    global LAST_PROCESSED_MESSAGE
    logger.info(f"[extract_members] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:\n{text[:200]}...")
    LAST_PROCESSED_MESSAGE = text[:200]
    
    members = set()
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    if not lines or not lines[0].lower().startswith('–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏'):
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏'")
        return members

    for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        line = line.strip()
        try:
            if line.startswith('@'):
                username = line[1:].lower()
                if re.fullmatch(r'[a-z0-9_]{5,32}', username):
                    members.add(username)
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω username: {username}")
            elif re.fullmatch(r'\d{5,}', line):
                members.add(line)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω user_id: {line}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
    return members

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    )
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/test - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞\n"
        "/debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "üìã <b>–§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        "@username1\n"
        "123456789\n"
        "@username2"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {update.effective_user.id}")

async def ping(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await update.message.reply_text("üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /ping –æ—Ç {update.effective_user.id}")

async def test_command(update: Update, context: CallbackContext):
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞"""
    test_msg = """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:
@testuser
123456789"""
    members = extract_members(test_msg)
    await update.message.reply_text(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{test_msg}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{members}")
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞")

async def debug_command(update: Update, context: CallbackContext):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    debug_info = (
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{LAST_PROCESSED_MESSAGE or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</code>\n\n"
        f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤:</b>\n"
        f"LIST_CHAT_ID: {LIST_CHAT_ID}\n"
        f"MAIN_CHAT_ID: {MAIN_CHAT_ID}"
    )
    await update.message.reply_text(debug_info, parse_mode='HTML')
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /debug")

# ========== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========

async def check_members(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {update.effective_chat.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫
        if update.effective_chat.id != LIST_CHAT_ID:
            logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á—É–∂–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message or not update.message.text:
            logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message.text.startswith('/'):
            logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message.text.startswith('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏'):
            logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å:\n"
                "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                "@username1\n"
                "123456789"
            )
            return

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{update.message.text[:200]}...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        new_members = extract_members(update.message.text)
        if not new_members:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
        try:
            main_chat = await context.bot.get_chat(MAIN_CHAT_ID)
            bot_member = await main_chat.get_member(context.bot.id)
            
            if not bot_member.can_restrict_members:
                await update.message.reply_text("‚õî –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await main_chat.get_administrators()
        removed = []
        errors = []

        for member in admins:
            # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞
            if member.status == 'creator':
                continue

            user_id = str(member.user.id)
            username = member.user.username.lower() if member.user.username else None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            if (user_id not in new_members) and (username not in new_members):
                try:
                    await context.bot.ban_chat_member(
                        chat_id=MAIN_CHAT_ID,
                        user_id=member.user.id
                    )
                    removed.append(f"@{member.user.username}" if member.user.username else user_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {user_id}")
                except Exception as e:
                    errors.append(f"{user_id}: {str(e)}")
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {str(e)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = []
        if removed:
            report.append(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã: {', '.join(removed)}")
        if errors:
            report.append(f"‚ùå –û—à–∏–±–∫–∏: {len(errors)}")
        if not removed and not errors:
            report.append("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        await update.message.reply_text("\n".join(report))

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

async def log_all_updates(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.debug(f"Update: {update.to_dict()}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        logger.info("="*50)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ FISExit")
        logger.info(f"–ß–∞—Ç —Å —Å–ø–∏—Å–∫–æ–º: {LIST_CHAT_ID}")
        logger.info(f"–¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {MAIN_CHAT_ID}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        cmd_handlers = [
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            CommandHandler("ping", ping),
            CommandHandler("test", test_command),
            CommandHandler("debug", debug_command)
        ]
        for handler in cmd_handlers:
            application.add_handler(handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(
                filters.Chat(chat_id=LIST_CHAT_ID) & filters.TEXT,
                check_members
            ),
            group=1
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        application.add_handler(
            MessageHandler(filters.ALL, log_all_updates),
            group=-1
        )

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)

if __name__ == "__main__":
    main()
