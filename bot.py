import logging
import re
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8285946823:AAE6mT6BtJsOkTQFsP-IrBHonhtaUaJAg8g"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MAIN_CHAT_ID = -4884863804  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç–∫—É–¥–∞ —É–¥–∞–ª—è—Ç—å)
LIST_CHAT_ID = -1002900105796  # ID —á–∞—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º (–≥–¥–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.DEBUG,  # NEW: –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# NEW: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
LAST_PROCESSED_MESSAGE = None

async def test_parse(update: Update, context: CallbackContext):
    test_text = """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:
@A2nn3Ma3l
333352583954"""
    
    members = extract_members(test_text)
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:\n{members}")

async def log_all_updates(update: Update, context: CallbackContext):  # NEW
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update.to_dict()}")

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∑–∞–ø—É—â–µ–Ω!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/test - –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n"
        "üìã <b>–§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        "@username1\n"
        "123456789"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {update.effective_user.id}")

def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏ @username –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global LAST_PROCESSED_MESSAGE  # NEW
    
    logger.info(f"[extract_members] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:\n{text[:200]}...")
    LAST_PROCESSED_MESSAGE = text[:200]  # NEW: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    members = set()
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    if not lines:
        logger.warning("[extract_members] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return members

    logger.info(f"[extract_members] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    if len(lines) > 1:
        logger.debug(f"[extract_members] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: '{lines[0]}'")
    
    processed_count = 0
    invalid_count = 0
    
    for line in lines[1:]:
        try:
            logger.debug(f"[extract_members] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: '{line}'")
            
            if line.startswith('@'):
                username = line[1:].lower()
                if re.fullmatch(r'[a-z0-9_]{5,32}', username):
                    members.add(username)
                    logger.debug(f"[extract_members] –î–æ–±–∞–≤–ª–µ–Ω username: {username}")
                    processed_count += 1
                else:
                    logger.warning(f"[extract_members] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username: {line}")
                    invalid_count += 1
                    
            elif re.fullmatch(r'\d{5,}', line):
                members.add(line)
                logger.debug(f"[extract_members] –î–æ–±–∞–≤–ª–µ–Ω user_id: {line}")
                processed_count += 1
            else:
                logger.warning(f"[extract_members] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: '{line}'")
                invalid_count += 1
                
        except Exception as e:
            logger.error(f"[extract_members] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {str(e)}")
            invalid_count += 1

    logger.info(
        f"[extract_members] –†–µ–∑—É–ª—å—Ç–∞—Ç: —É—Å–ø–µ—à–Ω–æ {processed_count}, "
        f"–æ—à–∏–±–æ–∫ {invalid_count}, –≤—Å–µ–≥–æ {len(members)}"
    )
    return members

async def check_members(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    global LAST_PROCESSED_MESSAGE  # NEW
    
    try:
        logger.info(f"[check_members] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {update.effective_chat.id}")
        
        # NEW: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message or not update.message.text:
            logger.warning("[check_members] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return
            
        # NEW: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.debug(f"[check_members] –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{update.message.text}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message.text.startswith('/'):
            logger.debug("[check_members] –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç
        if update.effective_chat.id != LIST_CHAT_ID:
            logger.warning(
                f"[check_members] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–æ–π —á–∞—Ç {update.effective_chat.id} "
                f"(–æ–∂–∏–¥–∞–µ–º {LIST_CHAT_ID})"
            )
            return

        # NEW: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        try:
            chat = await context.bot.get_chat(MAIN_CHAT_ID)
            bot_member = await chat.get_member(context.bot.id)
            if not bot_member.can_restrict_members:
                logger.error("[check_members] –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await update.message.reply_text("‚ö†Ô∏è –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ!")
                return
        except Exception as e:
            logger.error(f"[check_members] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        new_members = extract_members(update.message.text)
        if not new_members:
            logger.warning("[check_members] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        logger.info(f"[check_members] –ò–∑–≤–ª–µ—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(new_members)}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await chat.get_administrators()
        logger.info(f"[check_members] –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        removed = []
        for member in admins:
            user_id = str(member.user.id)
            username = member.user.username.lower() if member.user.username else None
            
            if (user_id not in new_members) and (username not in new_members):
                try:
                    if member.status != 'creator':
                        await context.bot.ban_chat_member(
                            chat_id=MAIN_CHAT_ID,
                            user_id=member.user.id
                        )
                        removed.append(username or user_id)
                        logger.info(f"[check_members] –£–¥–∞–ª–µ–Ω: {username or user_id}")
                except Exception as e:
                    logger.error(f"[check_members] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

        if removed:
            await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã: {', '.join(removed)}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"[check_members] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

async def test_command(update: Update, context: CallbackContext) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("[test_command] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    test_msg = """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:
@test_user
123456789"""
    
    fake_update = Update(
        update_id=update.update_id + 1,
        message=Message(
            message_id=update.message.message_id + 1,
            date=datetime.now(),
            chat=Chat(id=LIST_CHAT_ID, type='supergroup'),
            text=test_msg
        )
    )
    await check_members(fake_update, context)

async def debug_command(update: Update, context: CallbackContext):  # NEW
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_info = (
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{LAST_PROCESSED_MESSAGE or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"LIST_CHAT_ID: {LIST_CHAT_ID}\n"
        f"MAIN_CHAT_ID: {MAIN_CHAT_ID}"
    )
    await update.message.reply_text(f"<pre>{debug_info}</pre>", parse_mode='HTML')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("="*50)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        logger.info(f"LIST_CHAT_ID: {LIST_CHAT_ID}")
        logger.info(f"MAIN_CHAT_ID: {MAIN_CHAT_ID}")

        application = Application.builder().token(TOKEN).build()

        # NEW: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        application.add_handler(MessageHandler(filters.ALL, log_all_updates), group=-1)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("debug", debug_command))  # NEW

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.Chat(chat_id=LIST_CHAT_ID) & (filters.TEXT | filters.CAPTION),
# filters.Chat(LIST_CHAT_ID) & filters.TEXT & ~filters.COMMAND,
            check_members
        ), group=1)

        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)

if __name__ == "__main__":
    main()
