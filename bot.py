import logging
import re
from telegram import Update, ChatPermissions
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MAIN_CHAT_ID = -1001234567890  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç–∫—É–¥–∞ —É–¥–∞–ª—è—Ç—å)
LIST_CHAT_ID = -1009876543210  # ID —á–∞—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º (–≥–¥–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞...")

def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–ª–∏ @username –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    # –ò—â–µ–º ID (—Ü–∏—Ñ—Ä—ã) –∏ —é–∑–µ—Ä–Ω–µ–π–º—ã (@example)
    user_ids = set(re.findall(r"\b\d{5,}\b", text))  # ID –æ–±—ã—á–Ω–æ –æ—Ç 5 —Ü–∏—Ñ—Ä
    usernames = set(re.findall(r"@(\w+)", text.lower()))
    return user_ids.union(usernames)

def check_members(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞."""
    if update.effective_chat.id != LIST_CHAT_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_members = extract_members(update.effective_message.text)
        if not new_members:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_members = context.bot.get_chat_administrators(MAIN_CHAT_ID)
        current_members = {
            str(member.user.id) for member in chat_members
        }.union(
            {member.user.username.lower() for member in chat_members if member.user.username}
        )

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö, –∫–æ–≥–æ –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
        for member in chat_members:
            user_id = str(member.user.id)
            username = member.user.username.lower() if member.user.username else None

            if (user_id not in new_members) and (username not in new_members):
                try:
                    context.bot.ban_chat_member(MAIN_CHAT_ID, member.user.id)
                    logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω: {username or user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {username or user_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    dispatcher.add_handler(
        MessageHandler(
            Filters.chat(LIST_CHAT_ID) & Filters.text,
            check_members
        )
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    updater.start_polling()
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    updater.idle()

if __name__ == "__main__":
    main()
