import logging
import re
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MAIN_CHAT_ID = -123456789  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç–∫—É–¥–∞ —É–¥–∞–ª—è—Ç—å)
LIST_CHAT_ID = -987654321  # ID —á–∞—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º (–≥–¥–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∑–∞–ø—É—â–µ–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ ID: <code>{LIST_CHAT_ID}</code>\n"
        f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ ID: <code>{MAIN_CHAT_ID}</code>\n\n"
        "‚ö†Ô∏è <i>–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –æ–±–æ–∏—Ö —á–∞—Ç–∞—Ö!</i>"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

def extract_members(text: str) -> set:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–ª–∏ @username –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    user_ids = set(re.findall(r"\b\d{5,}\b", text))  # ID –æ—Ç 5 —Ü–∏—Ñ—Ä
    usernames = set(re.findall(r"@(\w+)", text.lower()))
    return user_ids.union(usernames)

async def check_members(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞."""
    if update.effective_chat.id != LIST_CHAT_ID:
        return

    try:
        new_members = extract_members(update.effective_message.text)
        if not new_members:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        chat = await context.bot.get_chat(MAIN_CHAT_ID)
        admins = await chat.get_administrators()
        
        current_members = {
            str(member.user.id) for member in admins
        }.union(
            {member.user.username.lower() for member in admins if member.user.username}
        )

        for member in admins:
            user_id = str(member.user.id)
            username = member.user.username.lower() if member.user.username else None

            if (user_id not in new_members) and (username not in new_members):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
                    if member.status != 'creator':
                        await context.bot.ban_chat_member(
                            chat_id=MAIN_CHAT_ID,
                            user_id=member.user.id
                        )
                        logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω: {username or user_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è: {username or user_id}")
                except Exception as e:
                    logger.error(f"üö´ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {username or user_id}: {e}")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    application.add_handler(
        MessageHandler(
            filters.Chat(chat_id=LIST_CHAT_ID) & filters.TEXT,
            check_members
        )
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == "__main__":
    main()
